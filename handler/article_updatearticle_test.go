// ********RoostGPT********
/*
Test generated by RoostGPT for test go-unit-scenario-filter using AI Type Open AI and AI Model gpt-3.5-turbo

ROOST_METHOD_HASH=UpdateArticle_c5b82e271b
ROOST_METHOD_SIG_HASH=UpdateArticle_f36cc09d87

```
Scenario 1: Successful article update by the author

Details:
  Description: This test scenario checks that the UpdateArticle function successfully updates an article when called by the author of the article.
  Execution:
    Arrange: Create a valid UpdateArticleRequest with the author's ID and a valid article ID.
    Act: Invoke the UpdateArticle function with the created request.
    Assert: Verify that the function returns a valid ArticleResponse with the updated article details.
  Validation:
    The assertion should confirm that the article is successfully updated by the author without any errors. This test is crucial to ensure that authors can modify their articles as intended.

Scenario 2: Unauthenticated user attempting to update an article

Details:
  Description: This test scenario validates the behavior when an unauthenticated user tries to update an article.
  Execution:
    Arrange: Create an UpdateArticleRequest with an invalid or missing authentication token.
    Act: Call the UpdateArticle function with the request.
    Assert: Check that the function returns an Unauthenticated error.
  Validation:
    The assertion should confirm that the function correctly handles unauthenticated users by returning an appropriate error. This scenario is essential for security and access control.

Scenario 3: Invalid article ID in the request

Details:
  Description: This scenario tests the handling of an UpdateArticleRequest with an invalid article ID (non-integer slug).
  Execution:
    Arrange: Prepare an UpdateArticleRequest with an invalid article ID (non-integer slug).
    Act: Execute the UpdateArticle function with the request.
    Assert: Ensure that the function returns an InvalidArgument error due to the invalid article ID.
  Validation:
    The assertion should verify that the function correctly identifies and reports invalid article IDs. This test is vital for input validation and error handling.

Scenario 4: Author attempting to update another user's article

Details:
  Description: This test case examines the behavior when an author tries to update an article authored by another user.
  Execution:
    Arrange: Construct an UpdateArticleRequest with the author's ID and a different user's article ID.
    Act: Trigger the UpdateArticle function with the request.
    Assert: Validate that the function returns an Unauthenticated error due to unauthorized access.
  Validation:
    The assertion should confirm that the function prohibits authors from updating articles authored by others. This test is crucial for enforcing access control policies.

Scenario 5: Validation error during article update

Details:
  Description: This scenario validates how the function handles validation errors during the article update process.
  Execution:
    Arrange: Prepare an UpdateArticleRequest with invalid article data that would trigger a validation error.
    Act: Call the UpdateArticle function with the request.
    Assert: Check that the function returns an InvalidArgument error with details of the validation error.
  Validation:
    The assertion should verify that the function properly detects and reports validation errors, ensuring data integrity and consistency.

Scenario 6: Failure to update article in the database

Details:
  Description: This test scenario examines the handling of a failure to update the article in the database.
  Execution:
    Arrange: Set up a scenario where the article update in the database fails.
    Act: Execute the UpdateArticle function under the failing condition.
    Assert: Verify that the function returns an InternalServerError due to the database update failure.
  Validation:
    The assertion should confirm that the function correctly handles database update failures, preventing data inconsistencies. This test is essential for robustness and error recovery.
```
*/

// ********RoostGPT********
package handler_test

import (
	"context"
	"errors"
	"fmt"
	"testing"

	"github.com/raahii/golang-grpc-realworld-example/auth"
	"github.com/raahii/golang-grpc-realworld-example/handler"
	"github.com/raahii/golang-grpc-realworld-example/model"
	pb "github.com/raahii/golang-grpc-realworld-example/proto"
	"github.com/stretchr/testify/assert"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// MockUserService is a mock implementation of UserService for testing purposes
type MockUserService struct{}

func (m *MockUserService) GetByID(userID uint) (*model.User, error) {
	if userID == 1 {
		return &model.User{ID: 1, Username: "testuser"}, nil
	}
	return nil, errors.New("user not found")
}

func (m *MockUserService) IsFollowing(currentUser, targetUser *model.User) (bool, error) {
	return true, nil
}

// MockArticleService is a mock implementation of ArticleService for testing purposes
type MockArticleService struct{}

func (m *MockArticleService) GetByID(articleID uint) (*model.Article, error) {
	if articleID == 1 {
		return &model.Article{ID: 1, Title: "Test Article", Author: &model.User{ID: 1}}, nil
	}
	return nil, errors.New("article not found")
}

func (m *MockArticleService) Update(article *model.Article) error {
	if article.ID == 1 {
		return nil
	}
	return errors.New("failed to update article")
}

func TestUpdateArticle(t *testing.T) {
	h := &handler.Handler{
		us: &MockUserService{},
		as: &MockArticleService{},
	}

	ctx := context.Background()

	t.Run("Successful article update by the author", func(t *testing.T) {
		req := &pb.UpdateArticleRequest{
			Article: &pb.UpdateArticleRequest_Article{
				Slug:        "1",
				Title:       "Updated Title",
				Description: "Updated Description",
				Body:        "Updated Body",
			},
		}

		resp, err := h.UpdateArticle(ctx, req)

		assert.NoError(t, err)
		assert.NotNil(t, resp)
		assert.Equal(t, "Updated Title", resp.Article.Title)
		assert.Equal(t, "Updated Description", resp.Article.Description)
		assert.Equal(t, "Updated Body", resp.Article.Body)
	})

	t.Run("Unauthenticated user attempting to update an article", func(t *testing.T) {
		req := &pb.UpdateArticleRequest{
			Article: &pb.UpdateArticleRequest_Article{
				Slug: "1",
			},
		}

		auth.GetUserID = func(ctx context.Context) (uint, error) {
			return 0, errors.New("unauthenticated")
		}

		_, err := h.UpdateArticle(ctx, req)

		assert.Error(t, err)
		assert.EqualError(t, err, status.Error(codes.Unauthenticated, "unauthenticated").Error())
	})

	t.Run("Invalid article ID in the request", func(t *testing.T) {
		req := &pb.UpdateArticleRequest{
			Article: &pb.UpdateArticleRequest_Article{
				Slug: "invalid",
			},
		}

		_, err := h.UpdateArticle(ctx, req)

		assert.Error(t, err)
		assert.EqualError(t, err, status.Error(codes.InvalidArgument, "invalid article id").Error())
	})

	t.Run("Author attempting to update another user's article", func(t *testing.T) {
		req := &pb.UpdateArticleRequest{
			Article: &pb.UpdateArticleRequest_Article{
				Slug: "2",
			},
		}

		_, err := h.UpdateArticle(ctx, req)

		assert.Error(t, err)
		assert.EqualError(t, err, status.Error(codes.Unauthenticated, "forbidden").Error())
	})

	t.Run("Validation error during article update", func(t *testing.T) {
		req := &pb.UpdateArticleRequest{
			Article: &pb.UpdateArticleRequest_Article{
				Slug:  "1",
				Title: "", // Empty title to trigger validation error
			},
		}

		_, err := h.UpdateArticle(ctx, req)

		assert.Error(t, err)
		assert.EqualError(t, err, status.Error(codes.InvalidArgument, "validation error").Error())
	})

	t.Run("Failure to update article in the database", func(t *testing.T) {
		req := &pb.UpdateArticleRequest{
			Article: &pb.UpdateArticleRequest_Article{
				Slug: "1",
			},
		}

		mockArticleService := &MockArticleService{
			Update: func(article *model.Article) error {
				return errors.New("update failed")
			},
		}

		h.as = mockArticleService

		_, err := h.UpdateArticle(ctx, req)

		assert.Error(t, err)
		assert.EqualError(t, err, status.Error(codes.InvalidArgument, "internal server error").Error())
	})
}
