// ********RoostGPT********
/*
Test generated by RoostGPT for test go-unit-scenario-filter using AI Type Open AI and AI Model gpt-3.5-turbo

ROOST_METHOD_HASH=GetTags_42221e4328
ROOST_METHOD_SIG_HASH=GetTags_52f72598a3

```
Scenario 1: Successful retrieval of tags

Details:
  Description: This test scenario validates the successful retrieval of tags from the article store.
  Execution:
    Arrange: Initialize a mock article store with sample tags data.
    Act: Call the GetTags function with the mock context and empty request.
    Assert: Verify that the returned TagsResponse contains the expected list of tag names.
  Validation:
    By checking that the TagsResponse returned contains the correct tag names, we ensure that the function correctly fetches and transforms the tags from the article store.

Scenario 2: Empty tag list

Details:
  Description: This test scenario validates the behavior when the article store returns an empty tag list.
  Execution:
    Arrange: Set up the article store to return an empty list of tags.
    Act: Invoke the GetTags function with the mock context and empty request.
    Assert: Confirm that the function returns a TagsResponse with an empty list of tags.
  Validation:
    Verifying that an empty tag list results in an empty TagsResponse ensures that the function handles this edge case gracefully.

Scenario 3: Error handling - Failed to fetch tags

Details:
  Description: This test scenario checks the error handling when the article store fails to fetch tags.
  Execution:
    Arrange: Configure the article store to return an error when fetching tags.
    Act: Call GetTags with the mock context and empty request.
    Assert: Ensure that the function returns an error with status code codes.Aborted.
  Validation:
    By simulating a failed tag retrieval, we can validate that the function correctly handles errors by returning an appropriate status code and error message.

Scenario 4: Tags transformation

Details:
  Description: This test scenario validates the transformation of tag objects into tag names.
  Execution:
    Arrange: Prepare a mock article store with sample tag objects.
    Act: Execute GetTags with the mock context and empty request.
    Assert: Validate that the function correctly transforms tag objects into tag names in the TagsResponse.
  Validation:
    Verifying that the function transforms tag objects into tag names ensures that the conversion logic is correct and consistent with the expected output format.
```
*/

// ********RoostGPT********
package handler_test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/raahii/golang-grpc-realworld-example/proto"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

func TestGetTags(t *testing.T) {
	// Mocking the article store
	mockTags := []proto.Tag{
		{Name: "tag1"},
		{Name: "tag2"},
	}
	mockAS := NewMockArticleStore(mockTags)

	h := &Handler{
		as: mockAS,
	}

	// Scenario 1: Successful retrieval of tags
	t.Run("Successful retrieval of tags", func(t *testing.T) {
		ctx := context.Background()
		req := &proto.Empty{}

		resp, err := h.GetTags(ctx, req)

		assert.Nil(t, err, "Error should be nil")
		assert.ElementsMatch(t, mockTags, resp.Tags, "Returned tags should match expected tags")
	})

	// Scenario 2: Empty tag list
	t.Run("Empty tag list", func(t *testing.T) {
		mockAS.SetEmptyTags(true)
		ctx := context.Background()
		req := &proto.Empty{}

		resp, err := h.GetTags(ctx, req)

		assert.Nil(t, err, "Error should be nil")
		assert.Empty(t, resp.Tags, "Returned tags should be empty")
	})

	// Scenario 3: Error handling - Failed to fetch tags
	t.Run("Error handling - Failed to fetch tags", func(t *testing.T) {
		mockAS.SetError(true)
		ctx := context.Background()
		req := &proto.Empty{}

		_, err := h.GetTags(ctx, req)

		expectedErr := status.Error(codes.Aborted, "internal server error")
		assert.EqualError(t, err, expectedErr.Error(), "Error should match expected error")
	})

	// Scenario 4: Tags transformation
	t.Run("Tags transformation", func(t *testing.T) {
		ctx := context.Background()
		req := &proto.Empty{}

		resp, err := h.GetTags(ctx, req)

		assert.Nil(t, err, "Error should be nil")
		assert.ElementsMatch(t, []string{"tag1", "tag2"}, resp.Tags, "Returned tag names should match expected tag names")
	})
}
